// Code generated by MockGen. DO NOT EDIT.
// Source: board_generator.go
//
// Generated by this command:
//
//	mockgen --source=board_generator.go --destination=mocks/board_generator.go --package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "campo-minado/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBoardGenerator is a mock of BoardGenerator interface.
type MockBoardGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockBoardGeneratorMockRecorder
}

// MockBoardGeneratorMockRecorder is the mock recorder for MockBoardGenerator.
type MockBoardGeneratorMockRecorder struct {
	mock *MockBoardGenerator
}

// NewMockBoardGenerator creates a new mock instance.
func NewMockBoardGenerator(ctrl *gomock.Controller) *MockBoardGenerator {
	mock := &MockBoardGenerator{ctrl: ctrl}
	mock.recorder = &MockBoardGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoardGenerator) EXPECT() *MockBoardGeneratorMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockBoardGenerator) New(lines, columns, mines int) (domain.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", lines, columns, mines)
	ret0, _ := ret[0].(domain.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockBoardGeneratorMockRecorder) New(lines, columns, mines any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockBoardGenerator)(nil).New), lines, columns, mines)
}
